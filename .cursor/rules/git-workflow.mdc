---
description: Essential Git workflow practices
globs:
alwaysApply: false
---

# Git Workflow Essentials

**Apply when:** User asks about Git, commits, branches, or version control.

## Core Principles
- Always work on feature/topic branches, never commit directly to main
- Use descriptive branch names: `feature/user-auth`, `bugfix/login-error`, `chore/update-deps`
- Write clear commit messages in present tense: `feat: add user login`
- Run tests before every commit
- Use `git switch` and `git restore` (modern alternatives to checkout)

## Branch Naming
- `feature/description` - new features
- `bugfix/description` - bug fixes  
- `chore/description` - maintenance tasks
- `test/description` - test-focused changes

## Commit Message Format
```
type(scope): description

"fix" for bug fixes
"feat" for new features
"perf" for performance improvements
"docs" for documentation changes
"style" for formatting changes
"refactor" for code refactoring
"test" for adding missing tests
"chore" for chore tasks
when determining the commit message prefix, pick the most relevant prefix from the list above
use lower case for commit messages
the commit message should also include a list of the changes made in the commit after the summary line if the changes are not self explanatory

Example: feat(auth): implement JWT validation
```